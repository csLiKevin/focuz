---
import type { FeedItem } from "../env";

export interface Props {
    item: FeedItem;
}

const { author, "content:encoded": contentEncoded, contentSnippet, link, "media:thumbnail": mediaThumbnail, pubDate, title } = Astro.props.item;
let { content = "" } = Astro.props.item;
let truncated = false;

// If content and content snippet are the same, display the encoded content instead.
if (contentSnippet?.length === content.length && contentEncoded?.length) {
    content = contentEncoded;
}

if (content.length > 512) {
    content = `${content?.slice(0, 512)} &hellip;`;
    truncated = true;
}

const formattedContent = content
    ?.replaceAll(/<br ?\/>/gi, "")
    .replaceAll(/<img/gi, "<img class='mx-auto'");

const thumbnail = mediaThumbnail?.$.url;
---

<section class="border-solid border-2 mb-8 px-8 rounded-lg shadow">
    <h3>
        <a href={link} target="_blank">
            {title}
            {link && <> &rarr;</>}
        </a>
    </h3>
    <h4 class="mt-2">
        {pubDate && new Date(pubDate).toLocaleString()}
        {author && <> &#8226; {author}</>}
    </h4>
    {thumbnail && <img class="mx-auto" src={thumbnail} />}
    <div class="mb-4">
        <span set:html={formattedContent}/>
        {
            truncated && link &&
            <a class="ml-2" href={link} target="_blank">
                {link && <>&rarr;</>}
            </a>
        }
    </div>
</section>
