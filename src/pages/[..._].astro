---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Parser from "rss-parser";
import type { Feed } from "../env";

const emptyFeed = {
    items: [],
    lastBuildDate: new Date().toString(),
};

function getSourceURL() {
    const url = Astro.url.href.replace(`${Astro.url.origin}/`, "");

    try {
        return new URL(url);
    } catch (_) {}

    try {
        return new URL(`${Astro.url.protocol}//${url}`);
    } catch (_) {}

    return null;
}

async function parseFeed(url: URL | null): Promise<Feed> {
    if (!url) {
        return emptyFeed;
    }

    const { origin } = url;
    if (origin === Astro.url.origin) {
        return emptyFeed;
    }

    const parser = new Parser<Feed>({
        customFields: {
            item: ["description", "media:thumbnail"],
        },
    });
    try {
        return parser.parseURL(new URL(url).toString());
    } catch (error: TypeError) {
        return {
            ...emptyFeed,
            items: [
                {
                    title: error.name,
                    contentSnippet: error.message,
                },
            ],
        };
    }
}

const source = getSourceURL();
const { items, lastBuildDate } = await parseFeed(source);
---

<Layout title="RSS Reader">
    <main class="content">
        <h1 class="title">
            <span class="text-gradient">RSS Reader</span>
        </h1>
        <p>
            <b
                >Updated: {
                    lastBuildDate && new Date(lastBuildDate).toLocaleString()
                }
            </b>
        </p>
        <ul role="list" class="column">
            {items.map((item) => <Card item={item} />)}
        </ul>
        {
            source && (
                <code>
                    <span class="text-gradient">
                        <a href={source} target="_blank">
                            {source}
                        </a>
                    </span>
                </code>
            )
        }
    </main>
</Layout>
