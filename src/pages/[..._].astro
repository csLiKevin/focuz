---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Parser from "rss-parser";
import type { Feed } from "../env";

const emptyFeed = {
    items: [],
    lastBuildDate: new Date().toString(),
};

function getSourceURL() {
    const url = Astro.url.href.replace(`${Astro.url.origin}/`, "");

    try {
        return new URL(url);
    } catch (_) {}

    try {
        return new URL(`${Astro.url.protocol}//${url}`);
    } catch (_) {}

    return null;
}

async function parseFeed(url: URL | null): Promise<Feed> {
    if (!url) {
        return emptyFeed;
    }

    const { origin } = url;
    if (origin === Astro.url.origin) {
        return emptyFeed;
    }

    const parser = new Parser<Feed>({
        customFields: {
            item: ["description", "media:thumbnail"],
        },
    });
    try {
        return parser.parseURL(new URL(url).toString());
    } catch (error: TypeError) {
        return {
            ...emptyFeed,
            items: [
                {
                    title: error.name,
                    contentSnippet: error.message,
                },
            ],
        };
    }
}

const source = getSourceURL();
const { items, lastBuildDate } = await parseFeed(source);
---

<Layout title="RSS Reader">
    <main class="content">
        <h1 class="title">
            <span class="text-gradient">RSS Reader</span>
        </h1>
        <p>
            <b
                >Updated: {
                    lastBuildDate && new Date(lastBuildDate).toLocaleString()
                }
            </b>
        </p>
        <ul role="list" class="column">
            {items.map((item) => <Card item={item} />)}
        </ul>
        {
            !items.length && (
                <p class="help">
                    Append a RSS feed url to the end of{" "}
                    <code>{Astro.url.host}/</code> to start reading!
                </p>
            )
        }
        {
            source && (
                <code>
                    <span class="text-gradient">
                        <a href={source} target="_blank">
                            {source}
                        </a>
                    </span>
                </code>
            )
        }
    </main>
</Layout>

<style>
    :root {
        --astro-gradient: linear-gradient(
            0deg,
            var(--color-primary),
            var(--color-secondary)
        );
    }

    h1.title {
        font-size: var(--font-size-xl);
        margin: 2rem 0;
    }

    main.content {
        margin: auto;
        padding: 1em;
        max-width: 80ch;
    }

    .text-gradient {
        font-weight: 900;
        background-image: var(--astro-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 100% 200%;
        background-position-y: 100%;
        border-radius: 0.4rem;
        animation: pulse 4s ease-in-out infinite;
    }

    @keyframes pulse {
        0%,
        100% {
            background-position-y: 0%;
        }
        50% {
            background-position-y: 80%;
        }
    }

    .help {
        line-height: 1.6;
        margin: 1rem 0;
        background: var(--color-primary);
        padding: 1rem;
        border-radius: 0.4rem;
        color: var(--color-bg);
    }

    .help code {
        font-size: 0.875em;
        border: 0.1em solid var(--color-border);
        border-radius: 4px;
        padding: 0.15em 0.25em;
    }

    .column {
        display: grid;
        grid-template-columns: 100%;
        gap: 1rem;
        padding: 0;
    }
</style>
